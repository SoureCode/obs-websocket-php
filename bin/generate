#!/usr/bin/env php
<?php

require_once __DIR__ . '/utils.php';

use PhpParser\BuilderFactory;
use PhpParser\Node\Stmt\Return_;
use PhpParser\PrettyPrinter\Standard;
use SoureCode\OBS\BaseClient;
use SoureCode\OBS\Generator\EnumGenerator;
use SoureCode\OBS\Generator\EventGenerator;
use SoureCode\OBS\Generator\RequestGenerator;
use SoureCode\OBS\Generator\ResponseGenerator;
use SoureCode\OBS\Generator\Utils;
use Symfony\Component\Filesystem\Filesystem;
use function Symfony\Component\String\u;

$projectDirectory = dirname(__DIR__);
$obsNamespace = 'SoureCode\\OBS';
$protocolNamespace = $obsNamespace . '\\Protocol';
$obsDirectory = $projectDirectory . '/src/OBS';
$protocolDirectory = $obsDirectory . '/Protocol';
$protocolFile = $projectDirectory . '/data/protocol.json';

$printer = new Standard();
$filesystem = new Filesystem();
$factory = new BuilderFactory();

$enumNamespace = $protocolNamespace . '\\Enum';
$requestNamespace = $protocolNamespace . '\\Request';
$responseNamespace = $protocolNamespace . '\\Response';
$eventNamespace = $protocolNamespace . '\\Event';

$enumDirectory = $protocolDirectory . '/Enum';
$requestDirectory = $protocolDirectory . '/Request';
$responseDirectory = $protocolDirectory . '/Response';
$eventDirectory = $protocolDirectory . '/Event';

$directories = [
    $enumDirectory,
    $requestDirectory,
    $responseDirectory,
    $eventDirectory,
];

foreach ($directories as $directory) {
    if ($filesystem->exists($directory)) {
        $filesystem->remove($directory);
    }

    if (!$filesystem->exists($directory)) {
        $filesystem->mkdir($directory);
    }
}

$protocol = json_decode(file_get_contents($protocolFile), true, 512, JSON_THROW_ON_ERROR);

$clientNode = $factory->class('Client')
    ->extend('BaseClient');

$clientUses = [];

foreach ($protocol['enums'] as $enum) {
    $enumGenerator = EnumGenerator::fromProtocol(
        $enumNamespace,
        $enum,
    );

    $node = $enumGenerator->generate();

    $code = $printer->prettyPrintFile([$node]);
    $enumFile = $enumDirectory . '/' . $enumGenerator->name . '.php';
    $filesystem->dumpFile($enumFile, $code);
}

foreach ($protocol['requests'] as $request) {
    $requestClass = RequestGenerator::fromProtocol($protocolNamespace . '\\Request', $request);
    $responseClass = ResponseGenerator::fromProtocol($protocolNamespace . '\\Response', $request);

    $clientMethod = $factory->method(u($requestClass->name)->beforeLast('Request')->camel()->toString())
        ->makePublic()
        ->setReturnType($responseClass->name);

    $clientUses[] = $requestClass->getReference();
    $clientUses[] = $responseClass->getReference();

    $newRequestInstance = $factory->new($requestClass->name);

    $requestCall = $factory->methodCall($factory->var('this'), 'request', [$newRequestInstance]);
    $clientMethod->addStmt(new Return_($factory->propertyFetch($factory->propertyFetch($requestCall, 'd'), 'responseData')));

    $paramTypes = [];

    foreach($requestClass->properties as $property) {
        $param = $factory->param($property->name)
            ->setType($property->type);

        if(!Utils::isNativeBuiltInType($property->type)) {
            $paramTypes[] = $property->type . ' $' . $property->name;
        }

        if ($property->isOptional()) {
            $param->setDefault(null);
        }

        $newRequestInstance->args[] = $factory->var($property->name);
        $clientMethod->addParam($param);
    }

    $docComment = Utils::formatDocComment(null, [
        'param' => $paramTypes,
    ], 4);

    if(strlen($docComment) > 0) {
        $clientMethod->setDocComment($docComment);
    }

    $clientNode->addStmt($clientMethod);

    $requestContent = $printer->prettyPrintFile([$requestClass->generate($factory)]);
    $responseContent = $printer->prettyPrintFile([$responseClass->generate($factory)]);

    $items = u($requestClass->namespace)->split('\\');
    $category = $items[count($items) - 1];

    $filesystem->dumpFile($requestDirectory .'/'. $category . '/' . $requestClass->name . '.php', $requestContent);
    $filesystem->dumpFile($responseDirectory .'/'. $category . '/' . $responseClass->name . '.php', $responseContent);
}

foreach ($protocol['events'] as $event) {
    $eventClass = EventGenerator::fromProtocol(
        $eventNamespace,
        $event,
    );

    $content = $printer->prettyPrintFile([$eventClass->generate($factory)]);

    // Extract category from namespace
    $names = u($eventClass->namespace)->split('\\');
    $category = $names[count($names) -1];

    $filesystem->dumpFile($eventDirectory . '/' . $category . '/' . $eventClass->name . '.php', $content);
}

$clientRootNode = $factory->namespace($obsNamespace);
$clientRootNode->addStmt($factory->use(BaseClient::class));

foreach ($clientUses as $use) {
    $clientRootNode->addStmt($factory->use($use));
}

$clientRootNode->addStmt($clientNode);
$filesystem->dumpFile($obsDirectory . '/Client.php', $printer->prettyPrintFile([$clientRootNode->getNode()]));

Tool::PHP_CS_FIXER->run([
        'fix',
        $obsDirectory,
]);
